name: .NET Provisioner ACA System Test
on: push
  # TODO: Tests workflow dependency to run system tests after unit tests on main repo
  # workflow_run:
  #   workflows: ["Dotnet Provisioner Unit Tests"]
  #   branches: [dotnet-provisioner-workflow-dev]
  #   types:
  #     - completed

env: 
  DOTNET_VERSION: '6.0'

jobs:
  dotnet-provisioner-aca-test-ubuntu:
    name: Setup ACA and Test Provisioner Ubuntu
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
         - os: ubuntu-20.04
         #- os: ubuntu-18.04
    continue-on-error: true
    outputs:
      output1: ${{ steps.ubuntu_result.outputs.result }}
      output2: ${{ steps.ubuntu_result_full.outputs.result }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: "Setup ACA and install TPM Simulator"
        run: |
          # Change dash to bash
          sudo echo "dash dash/sh boolean false" | sudo debconf-set-selections
          sudo DEBIAN_FRONTEND=noninteractive dpkg-reconfigure dash
          
          # ACA Dependencies
          export RUNLEVEL=1
          sudo apt-get -y update 
          sudo DEBIAN_FRONTEND=noninteractive apt-get -y install openjdk-8-jdk protobuf-compiler build-essential devscripts lintian debhelper
          
          # Strip SSL for db connection string
          DB_URL="persistence.db.url"
          NO_SSL_DB_URL="persistence.db.url                  = jdbc:mariadb://localhost/hirs_db?autoReconnect=true"
          sed -i "\@${DB_URL}@c${NO_SSL_DB_URL}" HIRS_Utils/src/main/resources/persistence.properties
          sed -i "\@${DB_URL}@c${NO_SSL_DB_URL}" package/deb/hirs-attestationca_2.1.1_amd64/opt/hirs/default-properties/attestationca/persistence.properties
          cd ./package/deb

          # Set up java 1.8 and mariadb.
          sudo sh ./java-mariadb-setup.sh

          # Set permissions for debian files
          sudo chmod -R 755 ./hirs-attestationca_2.1.1_amd64
      
          # Install tomcat 7
          sudo sh ./install-tomcat7.sh
          sudo systemctl daemon-reload

          # Fix random generation issue
          # Comment out RANDFILE
          sudo sed -i '13 s/^/#/' /etc/ssl/openssl.cnf

          # Build WAR Files, complete deb package and build.
          sudo sh ./package-aca-ubuntu.sh

          # Install .deb
          sudo apt-get install ./hirs-attestationca_2.1.1_amd64.deb

          # Verify tomcat is up
          sudo /usr/share/tomcat/bin/catalina.sh start   
          sleep 5

          # Waiting for ACA Response
          sudo sh wait-aca.sh

          # Setup tpm2 tools and simulator
          sudo apt install -y tpm2-tools
          curl -L -o sim.tar.gz https://downloads.sourceforge.net/project/ibmswtpm2/ibmtpm1661.tar.gz
          mkdir ibm-tpm
          tar -xvzf sim.tar.gz -C ./ibm-tpm
          cd ./ibm-tpm
          cd src
          sudo make
          sudo ./tpm_server & 
          sleep 5

      - name: Setup tpm simulator for ubuntu 20.04
        if: contains(matrix.os, 'ubuntu-20.04')
        run: |
          TPM2TOOLS_TCTI="mssim:host=localhost,port=2321"
          tpm2_startup -c &
          sleep 5
          ek_cert=/home/runner/work/HIRS/HIRS/.ci/setup/certs/ek_cert.der
          echo "Writing Endorsement Key to Simulator"
          if tpm2_nvreadpublic | grep -q 0x1c00002; then      echo "Released NVRAM for EK.";      tpm2_nvundefine 0x1c00002 -C o;    fi
          size=$(cat $ek_cert | wc -c)
          tpm2_nvdefine -C o -a 0x2000A -s $size 0x1c00002 
          tpm2_nvwrite -C o -i $ek_cert 0x1c00002 
          if tpm2_nvreadpublic | grep -q 0x1c90000; then      echo "Released NVRAM for PC.";      tpm2_nvundefine 0x1c90000 -C o;    fi
     
      - name: Setup tpm simulator for ubuntu 18.04
        if: contains(matrix.os, 'ubuntu-18.04')
        run: |
          tpm2_startup --clear &
          sleep 5
          ek_cert=/home/runner/work/HIRS/HIRS/.ci/setup/certs/ek_cert.der
          echo "Writing Endorsement Key to Simulator"
          if tpm2_nvlist | grep -q 0x1c00002; then      echo "Released NVRAM for EK.";      tpm2_nvrelease -x 0x1c00002 -a 0x40000001;    fi
          size=$(cat $ek_cert | wc -c)
          tpm2_nvdefine -x 0x1c00002 -a 0x40000001 -t 0x2000A -s $size
          tpm2_nvwrite -x 0x1c00002 -a 0x40000001 -f $ek_cert
          if tpm2_nvlist | grep -q 0x1c90000; then      echo "Released NVRAM for PC.";      tpm2_nvrelease -x 0x1c90000 -a 0x40000001;    fi

      - name: Build and configure Provisioner.NET
        run: |
          echo "Building provisioner"
          cd HIRS_Provisioner.NET/hirs
          dotnet tool install --global dotnet-deb
          dotnet deb -r linux-x64 -c Release
          
          echo "Installing provisioner"
          sudo apt-get install -yq /home/runner/work/HIRS/HIRS/HIRS_Provisioner.NET/hirs/bin/Release/net6.0/linux-x64/hirs.1.0.0.linux-x64.deb || true
          echo "::warning ::deb install needs attention"
          
          echo "Copying appsettings"
          sudo cp /home/runner/work/HIRS/HIRS/.ci/setup/appsettings.json /usr/share/hirs/

      - name: Set up test files
        run: |
          echo "Placing test artifacts"
          sudo mkdir -p /home/runner/work/efi
          sudo mkdir -p /home/runner/work/efi/EFI/tcg/cert/platform
          sudo mkdir -p /home/runner/work/efi/EFI/tcg/manifest/swidtag
          sudo mkdir -p /home/runner/work/efi/EFI/tcg/manifest/rim
          sudo mkdir -p /home/runner/work/hw
          sudo mkdir -p /home/runner/work/tpm
          sudo cp /home/runner/work/HIRS/HIRS/.ci/setup/test_hw.json /home/runner/work/hw/
          sudo cp /home/runner/work/HIRS/HIRS/.ci/setup/test_event_log /home/runner/work/tpm/  
        
      - name: Run Provisioner with no ACA policy
        id: ubuntu_result
        run: |         
          echo "Running provisioner"
          sudo /usr/share/hirs/tpm_aca_provision --tcp --sim
          retVal=$?
          echo "Provisioner exited with code $retVal"
          echo "::set-output name=result::$retVal"
      
      - name: Configure ACA for full validation
        run: |
          echo "Set ACA Policy for full validation"
          mysql -u root -D hirs_db -e "Update SupplyChainPolicy set enableEcValidation=1, enablePcAttributeValidation=1, enablePcValidation=1,
           enableUtcValidation=0, enableFirmwareValidation=0, enableExpiredCertificateValidation=0, enableIgnoreGpt=0, enableIgnoreIma=1, enableIgnoretBoot=0;"
          
          echo "Modifying system files for old device info collector"
          echo -n "Dell Inc." > tmp_file
          sudo cp -f tmp_file /sys/class/dmi/id/sys_vendor
          echo -n "Latitude 5580" > tmp_file
          sudo cp -f tmp_file /sys/class/dmi/id/product_name
          echo -n "" > tmp_file
          sudo cp -f tmp_file /sys/class/dmi/id/product_version
          echo -n "56LMWD2" > tmp_file
          sudo cp -f tmp_file /sys/class/dmi/id/product_serial
           
          echo "Uploading trust certs to the ACA"
          curl -k -s -F "file=@/home/runner/work/HIRS/HIRS/.ci/setup/certs/ca.crt" https://127.0.0.1:8443/HIRS_AttestationCAPortal/portal/certificate-request/trust-chain/upload
          curl -k -s -F "file=@/home/runner/work/HIRS/HIRS/.ci/setup/certs/RIMCaCert.pem" https://127.0.0.1:8443/HIRS_AttestationCAPortal/portal/certificate-request/trust-chain/upload
          curl -k -s -F "file=@/home/runner/work/HIRS/HIRS/.ci/setup/certs/RimSignCert.pem" https://127.0.0.1:8443/HIRS_AttestationCAPortal/portal/certificate-request/trust-chain/upload
          
      - name: Set up test files for full validation
        run: |
          echo "Copying artifacts to EFI"
          sudo cp /home/runner/work/HIRS/HIRS/.ci/system-tests/profiles/laptop/default/platformcerts/laptop.default.1.base.cer /home/runner/work/efi/EFI/tcg/cert/platform/
          sudo cp /home/runner/work/HIRS/HIRS/.ci/system-tests/profiles/laptop/default/swidtags/laptop.default.1.swidtag /home/runner/work/efi/EFI/tcg/manifest/swidtag/
          sudo cp /home/runner/work/HIRS/HIRS/.ci/system-tests/profiles/laptop/default/rims/laptop.default.1.rimel /home/runner/work/efi/EFI/tcg/manifest/rim/
          
          echo "Configure TPM PCRs"
          tpm2_pcrextend 0:sha256=38dc62a7c4ba6f19930538c1704b5a97f20f19e802951aab7e78ced610a3df5f -Q
          tpm2_pcrextend 0:sha256=d4720b4009438213b803568017f903093f6bea8ab47d283db32b6eabedbbf155 -Q
          tpm2_pcrextend 0:sha256=2649fffc46f2044e2d683712fb59ce10ccfcbeb91d541cbe117d9c2d459da273 -Q
          tpm2_pcrextend 0:sha256=df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119 -Q
          tpm2_pcrextend 1:sha256=cbb15df37b131921890da0973ed097d567123b08e3fa6449e33a6acd15385be0 -Q
          tpm2_pcrextend 1:sha256=df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119 -Q
          tpm2_pcrextend 1:sha256=4e93b6abf5532ff7a4da93769c41874f62cef02a9abc60b6baa62227762e5964 -Q
          tpm2_pcrextend 1:sha256=9ad0d8e4e4b6b80386f43e747d0e8f4a55a860bae1fbbf54c588fd474b30a1da -Q
          tpm2_pcrextend 1:sha256=fd662842e607c5800389f2d3073cb26100ce4b5f93d9e62e6b139813141a4173 -Q
          tpm2_pcrextend 2:sha256=df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119 -Q
          tpm2_pcrextend 3:sha256=df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119 -Q
          tpm2_pcrextend 4:sha256=df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119 -Q
          tpm2_pcrextend 4:sha256=dda0121dcf167db1e2622d10f454701837ac6af304a03ec06b3027904988c56b -Q
          tpm2_pcrextend 4:sha256=afb8038e914c99969dd828b58289ff2f820fb785025f21a92cc48651ebc13005 -Q
          tpm2_pcrextend 4:sha256=f80bdf3a58ec348742486e439f3c75a962043931f7cacd1e9bb8e6bf0cb2df9a -Q
          tpm2_pcrextend 5:sha256=df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119 -Q
          tpm2_pcrextend 5:sha256=ef4c76c6a2226cb891be17a65f5a3035889979b5a1b1a246224ee7120dda3efa -Q
          tpm2_pcrextend 6:sha256=df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119 -Q
          tpm2_pcrextend 7:sha256=ccfc4bb32888a345bc8aeadaba552b627d99348c767681ab3141f5b01e40a40e -Q
          tpm2_pcrextend 7:sha256=2abfe9865a654102acb12f0fefe52dc4d01bce40901410eb3dadaf212700a2b7 -Q
          tpm2_pcrextend 7:sha256=63a525134bfbc242058c0e6b42794f8b1d142d13029a9aa38a3272c5ca2390c5 -Q
          tpm2_pcrextend 7:sha256=ad1850a4885628d86273bad743779c9e665db060236270b5d24dd98f3a22fe86 -Q
          tpm2_pcrextend 7:sha256=f0bf49c6a2d3e170077f1f66875d6cb9b2aa382060cac5c0b645660bb95bc058 -Q
          tpm2_pcrextend 7:sha256=df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119 -Q
          tpm2_pcrextend 7:sha256=4d4a8e2c74133bbdc01a16eaf2dbb5d575afeb36f5d8dfcf609ae043909e2ee9 -Q
          tpm2_pcrextend 7:sha256=87ee47938723178072c0b0ed3ff7575e82ca37f0634a1a67d15d4d5ce53e8dab -Q
          tpm2_pcrextend 7:sha256=194c8cf6648963b6574271d6c86d250a381ea0346749a355576fa95f5b6e1dae -Q
          tpm2_pcrextend 14:sha256=9fa163e06ff76a9f0d0262151328aa38f903495bc81ebcbd5bc40fcdbebb4a63 -Q
          tpm2_pcrextend 14:sha256=8d8a3aae50d5d25838c95c034aadce7b548c9a952eb7925e366eda537c59c3b0 -Q
          
      - name: Run Provisioner with full validation
        id: ubuntu_result_full
        run: | 
          echo "Running provisioner"
          sudo /usr/share/hirs/tpm_aca_provision --tcp --sim
          retVal=$?
          echo "Provisioner exited with code $retVal"
          echo "::set-output name=result::$retVal"

      - name: Upload ACA Logs
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: ACA-logs
          path: /usr/share/tomcat/logs/

  Evaluator:
    name: Evaluate Tests
    needs: [dotnet-provisioner-aca-test-ubuntu]
    runs-on: ubuntu-latest
    continue-on-error: false
    steps:
    - name: Summarize
      run: |
        result1=$(echo ${{needs.dotnet-provisioner-aca-test-ubuntu.outputs.output1}})
        result2=$(echo ${{needs.dotnet-provisioner-aca-test-ubuntu.outputs.output2}})
        if [ $result1 -ne 0 ]; then
          exit 1
        fi
        if [ $result2 -ne 0 ]; then
          exit 1
        fi
