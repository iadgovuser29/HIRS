name: Windows-based Building and Unit Tests
on: push

jobs:
  windows-builder:
    name: 
    runs-on: ${{ matrix.os }} # currently only planning to target one OS
    strategy:                 # leaving this in case support for newer
      matrix:                 # options is as easy as adding them here
        include:              # (not likely)
         - os: windows-2022
    continue-on-error: false # set to true for debugging
    steps:
      - name: Set git autocrlf to false # to avoid line ending issues
        run: |
          git config --global core.autocrlf false
      - name: Checkout the repo
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install dotnet packaging tools
        run: |
          dotnet tool install --global dotnet-deb
          dotnet tool install --global dotnet-rpm
      - name: Work around dotnet packaging versioning issue
        run: |
          echo "::warning ::dotnet packaging does not currently work with the .NET 7 SDK. This means the dotnet rpm and dotnet deb commands require usage of .NET 6. May need to look for alternatives. For now, forcing dotnet to use the .NET 6 SDK..."
          cd HIRS_Provisioner.NET
          dotnet new globaljson --sdk-version 6.0.406 --force
      - name: Run Unit Tests
        run: |
          cd HIRS_Provisioner.NET
          dotnet --version
          dotnet restore
          dotnet test
      - name: Build and publish the .NET Provisioner for Windows
        run: |
          cd HIRS_Provisioner.NET/hirs
          dotnet publish -r win-x64 -c Release --self-contained
      - name: Build and publish the .NET Provisioner for Linux
        run: | 
          cd HIRS_Provisioner.NET/hirs
          dotnet publish -r linux-x64 -c Release --self-contained
      - name: Create the .NET Provisioner MSI Artifact
        id: dotnet_provisioner_build_msi
        run: |
          cd HIRS_Provisioner.NET/hirs
          dotnet msbuild hirs.csproj /t:Msi /P:TargetFramework=net6.0 /p:RuntimeIdentifier=win-x64 /p:Configuration=Release
          ls bin/Release/net6.0/win-x64/*.msi
          $hash=(Get-FileHash -Algorithm SHA256 -Path (Get-ChildItem "bin/Release/net6.0/win-x64/*.msi"))
          echo "$hash"
          echo ("::warning ::Artifact {0} {1} hash: {2}" -f (Split-Path $hash.Path -leaf),$hash.Algorithm,$hash.Hash)
          ls bin/Release/net6.0/win-x64/publish
      - name: Create the .NET Provisioner RPM Artifact
        id: dotnet_provisioner_build_rpm
        run: |
          cd HIRS_Provisioner.NET/hirs
          dotnet rpm -r linux-x64 -c Release
          ls bin/Release/net6.0/linux-x64/
          $hash=(Get-FileHash -Algorithm SHA256 -Path (Get-ChildItem "bin/Release/net6.0/linux-x64/*.rpm"))
          echo "$hash"
          echo ("::warning ::Artifact {0} {1} hash: {2}" -f (Split-Path $hash.Path -leaf),$hash.Algorithm,$hash.Hash)
          ls bin/Release/net6.0/linux-x64/publish
      - name: Create the .NET Provisioner DEB Artifact
        id: dotnet_provisioner_build_deb
        run: |
          cd HIRS_Provisioner.NET/hirs
          dotnet deb -r linux-x64 -c Release
          ls bin/Release/net6.0/linux-x64/*.deb
          $hash=(Get-FileHash -Algorithm SHA256 -Path (Get-ChildItem "bin/Release/net6.0/linux-x64/*.deb"))
          echo "$hash"
          echo ("::warning ::Artifact {0} {1} hash: {2}" -f (Split-Path $hash.Path -leaf),$hash.Algorithm,$hash.Hash)
          ls bin/Release/net6.0/linux-x64/publish
      - name: Upload MSI Artifact
        uses: actions/upload-artifact@v3
        if: steps.dotnet_provisioner_build_msi.outcome == 'success'
        with:
          name: hirs.msi
          path: HIRS_Provisioner.NET/hirs/bin/Release/net6.0/win-x64/*.msi
      - name: Upload RPM Artifact
        uses: actions/upload-artifact@v3
        if: steps.dotnet_provisioner_build_rpm.outcome == 'success'
        with:
          name: hirs.rpm
          path: HIRS_Provisioner.NET/hirs/bin/Release/net6.0/linux-x64/*.rpm
      - name: Upload DEB Artifact
        uses: actions/upload-artifact@v3
        if: steps.dotnet_provisioner_build_deb.outcome == 'success'
        with:
          name: hirs.deb
          path: HIRS_Provisioner.NET/hirs/bin/Release/net6.0/linux-x64/*.deb
      - name: Setup tmate session on error
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 5 # The ssh session will be available for 5 minutes.
        with:
          limit-access-to-actor: true # Only the person who pushed can access- with a github-registered key.

